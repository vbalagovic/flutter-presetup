#Ruby version
ruby_version("3.0.2")

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
fastlane_require 'dotenv'

default_platform(:ios)

before_all do |lane|
  Dotenv.overload '../../.env'
  environment = lane_context[SharedValues::ENVIRONMENT]
  unless environment.nil?
      puts "Load .env file of #{environment}"
      Dotenv.overload '../../.env.' + environment
  end
end

platform :ios do
  # Have an easy way to get the root of the project
  def root_path
    Dir.pwd.sub(/.*\Kfastlane/, '').sub(/.*\Kandroid/, '').sub(/.*\Kios/, '').sub(/.*\K\/\//, '')
  end

  # Have an easy way to run flutter tasks on the root of the project
  lane :sh_on_root do |options|
    command = options[:command]
    sh("cd #{root_path} && #{command}")
  end

  # Updates XCode project settings to use a different code signing based on method
  private_lane :archive do |options|
    method = options[:method]
    env = ENV['SCHEME']
    scheme = env == "dev" ? "dev" : "prod"
    configuration = env == "dev" ? "Release-dev" : "Release-prod"

    update_code_signing_settings(
      build_configurations: configuration,
      use_automatic_signing: true
    )

    update_project_team(
      teamid: ENV['IOS_TEAM_ID']
    )

    build_app(
      output_directory: "#{root_path}/build/ios",
      build_path: "#{root_path}/build/ios",
      archive_path: "#{root_path}/build/ios",
      export_method: method,
      scheme: env,
      configuration: configuration,
      xcargs: "-allowProvisioningUpdates"
    )
  end

  lane :build do |options|
    env = ENV['SCHEME']

    params = env == "dev" ? '--flavor dev -t lib/main_dev.dart ' : '--flavor prod -t lib/main_prod.dart '
    desc("Cleaning...")
    sh_on_root(command: "fvm install #{ENV['FLUTTER_VERSION']} && fvm use #{ENV['FLUTTER_VERSION']} --force && fvm flutter clean && rm -Rf ios/Pods && rm -Rf ios/.symlinks && rm -Rf ios/Flutter/Flutter.framework && rm -Rf ios/Flutter/Flutter.podspec")
    desc("Building...")
    sh_on_root(command: "cd ios && gem install cocoapods")
    sh_on_root(command: "fvm use #{ENV['FLUTTER_VERSION']} && fvm flutter pub get && cd ios && fvm flutter precache --ios && pod install --repo-update")
    sh_on_root(command: "fvm use #{ENV['FLUTTER_VERSION']} && fvm flutter build ipa #{params}")
  end

  lane :deploy_staging do
    build(sign_enabled: true)
    archive(method: "ad-hoc")

    firebase_app_distribution(
      app: ENV['IOS_FIREBASE_APP_DISTRIBUTION_APP'],
      testers: ENV['IOS_FIREBASE_APP_DISTRIBUTION_TESTERS'],
      release_notes: File.read("#{root_path}/changelog.txt"),
      service_credentials_file: ENV['FIREBASE_APP_DISTRIBUTION_CREDENTIALS_FILE_PATH'],
    )
  end

  lane :deploy_beta do
    build(sign_enabled: true)
    archive(method: "app-store")

    api_key = app_store_connect_api_key(
      key_id: ENV['KEY_ID'],
      issuer_id: ENV['KEY_ISSUER_ID'],
      key_filepath: ENV['PATH_TO_THE_P8_KEY'],
      duration: 1200, # optional (maximum 1200)
      in_house: false # optional but may be required if using match/sigh
    )

    upload_to_testflight(
      api_key: api_key,
      username: ENV["APP_STORE_CONNECT_USERNAME"]
    )
  end

end